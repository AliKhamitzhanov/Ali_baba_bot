from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import bot
import random
from keyboard.client_kb import start_markup
from perser.doramy import parser
import time


async def menu(message: types.Message):
    await bot.send_message(message.chat.id, f"–°–ò–°–¢–ï–ú–ê –ì–ê–ß–ò–ú–£–ß–ò –û–¢–ö–†–´–õ–ê–°–¨!\n"
                                            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.full_name}", reply_markup=start_markup)


async def pin(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    else:
        await bot.pin_chat_message(message.chat.id, message.reply_to_message.message_id)


async def dice(message: types.Message):
    if message.chat.type != "private":
        await bot.send_message(message.chat.id, f"–í—ã–±–æ—Ä –ë–û–¢–ê:")
        bot_choice = await bot.send_dice(message.chat.id, emoji="üé≤")
        await bot.send_message(message.chat.id, f"–í—ã–±–æ—Ä {message.from_user.first_name}:")
        user_choice = await bot.send_dice(message.chat.id, emoji="üé≤")
        time.sleep(4)
        bot_answer = bot_choice.dice.value
        user_answer = user_choice.dice.value
        if bot_answer > user_answer:
            await bot.send_message(message.chat.id, f"{message.from_user.first_name} –ø—Ä–æ–∏–≥—Ä–∞–ª –ë–û–¢–£!")
        elif bot_answer < user_answer:
            await bot.send_message(message.chat.id, f"{message.from_user.first_name} –≤—ã–∏–≥—Ä–∞–ª –ë–û–¢–ê!")
        elif bot_answer == user_answer:
            await bot.send_message(message.chat.id, f"–ù–∏—á—å—è –ø–æ–±–µ–¥–∏–ª–∞ –¥—Ä—É–∂–±–∞ (>_<)")
    else:
        await message.reply("–ü–∏—à–∏ –≤ –≥—Ä—É–ø–ø–µ –ø—É—Ç–Ω–∏–∫!")


#quiz
async def quiz(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(text="–õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="button_easy_call_1"),
        types.InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="button_medium_call_1"),
        types.InlineKeyboardButton(text="–°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="button_hard_call_1")
    )

    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=markup)


#quiz_easy
async def quiz_easy(message: types.Message):
    markup = InlineKeyboardMarkup()
    button_easy_call_1 = InlineKeyboardButton("NEXT", callback_data='button_easy_call_1')
    markup.add(button_easy_call_1)

    question = "–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –ª–∏—à–Ω–µ–µ: 1, 3, 5, 6, 7?"
    answers = [
        "7",
        "6",
        "1",
        "3",
        "5"
    ]
    await bot.send_poll(
        chat_id=message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π –º–∞—Ö–∞—Ç—Å—è –±—É–¥–µ—à!",
        reply_markup=markup
    )


# quiz_medium
async def quiz_medium(message: types.Message):
    markup = InlineKeyboardMarkup()
    button_medium_call_1 = InlineKeyboardButton("NEXT", callback_data='button_medium_call_1')
    markup.add(button_medium_call_1)

    question = "–°–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º—ã, –∞ —Ç–∞–∫–∂–µ —Ç—É—Ö –æ–±—ä–µ–∫—Ç–æ–≤, —á—å–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –º–µ–Ω—è—é—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã, —ç—Ç–æ:"
    answers = [
        "—Å—Ä–µ–¥–∞",
        "–ø–æ–¥—Å–∏—Å—Ç–µ–º–∞",
        "–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
    ]
    await bot.send_poll(
        chat_id=message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=0,
        open_period=60,
        explanation="–û–π –±–æ–π –º–∞—Ö–∞—Ç—Å—è –±—É–¥–µ—à!",
        reply_markup=markup
    )


# quiz_hard
async def quiz_hard(message: types.Message):
    markup = InlineKeyboardMarkup()
    button_hard_call_1 = InlineKeyboardButton("NEXT", callback_data='button_hard_call_1')
    markup.add(button_hard_call_1)

    question = "–ü—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏:"
    answers = [
        "—ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏–º–ø–æ—Ä—Ç",
        "–≤–Ω–µ—à–Ω–µ—Ç–æ—Ä–≥–æ–≤—ã–π –æ–±–æ—Ä–æ—Ç –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 25% –æ—Ç –í–í–ü",
        "–∏–º–ø–æ—Ä—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç",
        "–≤–Ω–µ—à–Ω–µ—Ç–æ—Ä–≥–æ–≤—ã–π –æ–±–æ—Ä–æ—Ç –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 10% –æ—Ç –í–í–ü"
    ]
    await bot.send_poll(
        chat_id=message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π –º–∞—Ö–∞—Ç—Å—è –±—É–¥–µ—à!",
        reply_markup=markup
    )


#mem
async def mem(message: types.Message):
    photos = [
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image1.jpg",
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image2.jpg",
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image3.jpg",
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image4.jpg",
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image5.jpg",
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image6.jpg",
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image7.jpg",
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image8.jpg",
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image9.jpg",
        "C:/Users/User/PycharmProjects/NAEGYOII/imges/image10.jpg",
    ]

    img = open(random.choice(photos), 'rb')
    await bot.send_photo(message.chat.id, photo=img)


#music
async def music(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text="1", callback_data="music_1"),
        types.InlineKeyboardButton(text="2", callback_data="music_2"),
        types.InlineKeyboardButton(text="3", callback_data="music_3"),
        types.InlineKeyboardButton(text="4", callback_data="music_4"),
        types.InlineKeyboardButton(text="5", callback_data="music_5"),
        types.InlineKeyboardButton(text="6", callback_data="music_6"),
        types.InlineKeyboardButton(text="7", callback_data="music_7"),
        types.InlineKeyboardButton(text="8", callback_data="music_8"),
        types.InlineKeyboardButton(text="9", callback_data="music_9"),
        types.InlineKeyboardButton(text="10", callback_data="music_10"),
    )

    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Å–Ω—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å)\n"
                         "1.–ò—Ä–∏–Ω–∞ –ö–∞–π—Ä–∞—Ç–æ–≤–Ω–∞, Shiza ‚Äì –ö–æ–∫ —Ç—É\n"
                         "2.instasamka-moja-kiska-dlja-nego-vsegda-gotova\n"
                         "3.Lil_Nas_X_Jack_Harlow_-_INDUSTRY_BABY\n"
                         "4.Lizzo_-_About_Damn_Time\n"
                         "5.Melanie_Martinez_-_Cake\n"
                         "6.Naruto Shippuden OST ‚Äî Opening ‚Ññ1\n"
                         "7.opening_1_sezona_-_Klinok_rassekayushhijj_demonov\n"
                         "8.OST_Naruto_shippuden_Ikimono-gakari_-_Blue_Bird\n"
                         "9.Vance_Joy_-_Missing_Piece\n"
                         "10.Vance_Joy_-_Riptide\n", reply_markup=keyboard,)



#video
async def video(message: types.Message):
    videos = [
        "C:/Users/User/PycharmProjects/NAEGYOII/video/#–º–æ—Ç–∏–≤–∞—Ü–∏—è#–ª—É—á—à–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏—è.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/Bro‚Äôs Valid Right.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/–≤–∏–¥–µ–æ —Å–æ —Å–º—ã—Å–ª–æ–º.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/–ì—Ä—É—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ . –°–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–æ —Å–º—ã—Å–ª–æ–º.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/–ì—Ä—É—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ —Å–º—ã—Å–ª–æ–º! –û –∂–∏–∑–Ω–∏, –æ –ª—é–±–≤–∏.mp4",

        "C:/Users/User/PycharmProjects/NAEGYOII/video/–ì—Ä—É—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ —Å–º—ã—Å–ª–æ–º, –ª—é–±–∏ –∏ –±—É–¥—å –ª—é–±–∏–º—ã–º.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/–ì—Ä—É—Å—Ç–Ω—ã–µ –≤–∏–¥–µ–æ, —Å–æ —Å–º—ã—Å–ª–æ–º, –¥–æ —Å–ª—ë–∑ üò≠_–ü—Ä–æ –ª—é–±–æ–≤—å –¥—É—à–µ–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ –ª—é–±–æ–≤—åüíî.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/–ú–æ—Ç–∏–≤–∞—Ü–∏—è. –î–µ–π—Å—Ç–≤—É–π –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å! #–º–æ—Ç–∏–≤–∞—Ü–∏—è #–¥–µ–π—Å—Ç–≤–∏—è #—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ #–ø–æ–≤–µ—Ä—å–≤—Å.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/–°–õ–û–í–ê –°–û –°–ú–´–°–õ–û–ú !!! –ú–û–¢–ò–í–ê–¶–ò–Ø –î–õ–Ø –ñ–ò–ó–ù–ò !!!.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/–¶–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥–∫—É, –∫–∞–∂–¥—ã–π –º–∏–≥! –ó–∞–¥—É–º–∞–π—Ç–µ—Å—å.mp4",
    ]
    video = open(random.choice(videos), 'rb')
    await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É—Å–∫–∞ –≤–∏–¥–µ–æ!")
    await bot.send_video(message.chat.id, video=video)


#motivationVideo
async def motivationVideo(message: types.Message):
    videos = [
        "C:/Users/User/PycharmProjects/NAEGYOII/video/motivation/–ñ–∏–≤–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º! –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ #–∂–∏–≤–∏—Å–µ–π—á–∞—Å #—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–º–æ—Ç–∏–≤–∞—Ü–∏—è.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è. –ù–µ –°–¥–∞–≤–∞–π—Å—è. #–º–æ—Ç–∏–≤–∞—Ü–∏—è #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–¥–µ–π—Å—Ç–≤–∏—è #—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è. –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–¥–µ–π—Å—Ç–≤–∏—è #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è. –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! –î–µ–π—Å—Ç–≤—É–π. #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–¥–µ–π—Å—Ç–≤–∏—è #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ .mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ. –£—Å–ø–µ—Ö. #–¥–µ–π—Å—Ç–≤–∏—è #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ #—É—Å–ø–µ—Ö #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–º—ã—à–ª–µ.mp4",
        "C:/Users/User/PycharmProjects/NAEGYOII/video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ.–ü–æ–ª—é —Å–µ–±—è! #–¥–µ–π—Å—Ç–≤–∏—è #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #—Å–∞–º–æ—Å–æ–≤–µ—Ä.mp4",
    ]
    video = open(random.choice(videos), 'rb')
    await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É—Å–∫–∞ –≤–∏–¥–µ–æ!")
    await bot.send_video(message.chat.id, video=video)


async def parser_doramy(message: types.Message):
    data = parser()
    for item in data:
        await bot.send_message(
            message.from_user.id,
            f"{item['link']}\n\n"
            f"{item['title']}\n"
            f"–ê–≤—Ç–æ—Ä: {item['authors']}\n\n"
            f"#{item['series']}\n"
            f"#{item['country']}\n"
            f"#{item['year']}\n"
            f"#{item['genre']}\n"
            f"#{item['added']}\n"
        )


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(menu, commands=['start'])
    dp.register_message_handler(pin, commands=['pin'], commands_prefix=['!'])
    dp.register_message_handler(dice, commands=['dice'])
    dp.register_message_handler(quiz, commands=['quiz'])
    dp.register_message_handler(quiz_easy, commands=['quizEasy'])
    dp.register_message_handler(quiz_medium, commands=['quizMedium'])
    dp.register_message_handler(quiz_hard, commands=['quizHard'])
    dp.register_message_handler(mem, commands=['mem'])
    dp.register_message_handler(music, commands=['music'])
    # dp.register_message_handler(allMusic, commands=['allMusic'])
    dp.register_message_handler(video, commands=['video'])
    dp.register_message_handler(motivationVideo, commands=['motivationVideo'])
    dp.register_message_handler(parser_doramy, commands=['doramy'])
