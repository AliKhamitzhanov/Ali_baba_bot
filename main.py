from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, audio
from aiogram.utils import executor
from config import bot, dp
import logging
import random


@dp.message_handler(commands=['start'])
async def mem(message: types.Message):
    await bot.send_message(message.chat.id, f"–°–ò–°–¢–ï–ú–ê –ì–ê–ß–ò–ú–£–ß–ò –û–¢–ö–†–´–õ–ê–°–¨!\n"
                                            f"–ï–µ–ª–∏ —Ö–æ—Ç–∏–µ—Ç —Å—Ç–∞—Ç—å –∫–µ–º —Ç–æ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç -> /quiz\n"
                                            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –º–µ–º -> /mem\n"
                                            f"–ï—Å–ª–∏ –≤—ã–º –Ω—É–∂–Ω—ã –≤–∏–¥–µ–æ —Å–æ —Å–º—ã—Å–ª–æ–º —Ç–æ –≤–∞–º –∫–æ –º–Ω–µ -> /video\n"
                                            f"–ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ –≤–∞–º —Å—É–¥–∞ -> /motivationVideo",)

#mem
@dp.message_handler(commands=['mem'])
async def mem(message: types.Message):
    photos = ["imges/image1.jpg", "imges/image2.jpg", "imges/image3.jpg", "imges/image4.jpg", "imges/image5.jpg",\
              "imges/image6.jpg", "imges/image7.jpg", "imges/image8.jpg", "imges/image9.jpg","imges/image10.jpg",]

    imges = open(random.choice(photos), 'rb')

    await bot.send_photo(message.chat.id, photo=imges)

#music
@dp.message_handler(commands=['music'])
async def music(message: types.Message):
    music = [
        "music/Harry_Styles_-_Watermelon_Sugar_67429150.mp3",
        "music/instasamka-moja-kiska-dlja-nego-vsegda-gotova_(kztrack.kz).mp3",
        "music/Lil_Nas_X_Jack_Harlow_-_INDUSTRY_BABY_73061759.mp3",
        "music/Lizzo_-_About_Damn_Time_74115343.mp3",
        "music/Melanie_Martinez_-_Cake_48195644.mp3",

        "music/Naruto Shippuden OST ‚Äî Opening ‚Ññ1 (www.lightaudio.ru).mp3",
        "music/opening_1_sezona_-_Klinok_rassekayushhijj_demonov_65423151.mp3",
        "music/OST_Naruto_shippuden_Ikimono-gakari_-_Blue_Bird_OP3_62967143.mp3",
        "music/Vance_Joy_-_Missing_Piece_73152511.mp3",
        "music/Vance_Joy_-_Riptide_47960565.mp3",
    ]

    audio = open(random.choice(music), 'rb')
    await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É—Å–∫–∞ –º—É–∑—ã–∫–∏!")
    await bot.send_audio(message.chat.id, audio=audio)

#allmusic
@dp.message_handler(commands=['allmusic'])
async def music(message: types.Message):


    audio1 = open("music/Harry_Styles_-_Watermelon_Sugar_67429150.mp3", 'rb')
    audio2 = open("music/instasamka-moja-kiska-dlja-nego-vsegda-gotova_(kztrack.kz).mp3", 'rb')
    audio3 = open("music/Lil_Nas_X_Jack_Harlow_-_INDUSTRY_BABY_73061759.mp3", 'rb')
    audio4 = open("music/Lizzo_-_About_Damn_Time_74115343.mp3", 'rb')
    audio5 = open("music/Melanie_Martinez_-_Cake_48195644.mp3", 'rb')
    audio6 = open("music/Naruto Shippuden OST ‚Äî Opening ‚Ññ1 (www.lightaudio.ru).mp3", 'rb')
    audio7 = open("music/opening_1_sezona_-_Klinok_rassekayushhijj_demonov_65423151.mp3", 'rb')
    audio8 = open("music/OST_Naruto_shippuden_Ikimono-gakari_-_Blue_Bird_OP3_62967143.mp3", 'rb')
    audio9 = open("music/Vance_Joy_-_Missing_Piece_73152511.mp3", 'rb')
    audio10 = open("music/Vance_Joy_-_Riptide_47960565.mp3", 'rb')

    await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É—Å–∫–∞ –≤—Å–µ–π –º—É–∑—ã–∫–∏!")
    await bot.send_audio(message.chat.id, audio=audio1)
    await bot.send_audio(message.chat.id, audio=audio2)
    await bot.send_audio(message.chat.id, audio=audio3)
    await bot.send_audio(message.chat.id, audio=audio4)
    await bot.send_audio(message.chat.id, audio=audio5)
    await bot.send_audio(message.chat.id, audio=audio6)
    await bot.send_audio(message.chat.id, audio=audio7)
    await bot.send_audio(message.chat.id, audio=audio8)
    await bot.send_audio(message.chat.id, audio=audio9)
    await bot.send_audio(message.chat.id, audio=audio10)



#video
@dp.message_handler(commands=['video'])
async def video(message: types.Message):
    videos = [
        "video/#–º–æ—Ç–∏–≤–∞—Ü–∏—è#–ª—É—á—à–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏—è.mp4",
        "video/Bro‚Äôs Valid Right.mp4",
        "video/–≤–∏–¥–µ–æ —Å–æ —Å–º—ã—Å–ª–æ–º.mp4",
        "video/–ì—Ä—É—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ . –°–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–æ —Å–º—ã—Å–ª–æ–º.mp4",
        "video/–ì—Ä—É—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ —Å–º—ã—Å–ª–æ–º! –û –∂–∏–∑–Ω–∏, –æ –ª—é–±–≤–∏.mp4",

        "video/–ì—Ä—É—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ —Å–º—ã—Å–ª–æ–º, –ª—é–±–∏ –∏ –±—É–¥—å –ª—é–±–∏–º—ã–º.mp4",
        "video/–ì—Ä—É—Å—Ç–Ω—ã–µ –≤–∏–¥–µ–æ, —Å–æ —Å–º—ã—Å–ª–æ–º, –¥–æ —Å–ª—ë–∑ üò≠_–ü—Ä–æ –ª—é–±–æ–≤—å –¥—É—à–µ–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ –ª—é–±–æ–≤—åüíî.mp4",
        "video/–ú–æ—Ç–∏–≤–∞—Ü–∏—è. –î–µ–π—Å—Ç–≤—É–π –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å! #–º–æ—Ç–∏–≤–∞—Ü–∏—è #–¥–µ–π—Å—Ç–≤–∏—è #—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ #–ø–æ–≤–µ—Ä—å–≤—Å.mp4",
        "video/–°–õ–û–í–ê –°–û –°–ú–´–°–õ–û–ú !!! –ú–û–¢–ò–í–ê–¶–ò–Ø –î–õ–Ø –ñ–ò–ó–ù–ò !!!.mp4",
        "video/–¶–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥–∫—É, –∫–∞–∂–¥—ã–π –º–∏–≥! –ó–∞–¥—É–º–∞–π—Ç–µ—Å—å.mp4",
    ]
    video = open(random.choice(videos), 'rb')
    await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É—Å–∫–∞ –≤–∏–¥–µ–æ!")
    await bot.send_video(message.chat.id, video=video)

#motivationVideo
@dp.message_handler(commands=['motivationVideo'])
async def video(message: types.Message):
    videos = [
        "video/motivation/–ñ–∏–≤–∏ –Ω–∞—Å—Ç–æ—è—â–∏–º! –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ #–∂–∏–≤–∏—Å–µ–π—á–∞—Å #—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–º–æ—Ç–∏–≤–∞—Ü–∏—è.mp4",
        "video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è. –ù–µ –°–¥–∞–≤–∞–π—Å—è. #–º–æ—Ç–∏–≤–∞—Ü–∏—è #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–¥–µ–π—Å—Ç–≤–∏—è #—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.mp4",
        "video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è. –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–¥–µ–π—Å—Ç–≤–∏—è #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ.mp4",
        "video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è. –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! –î–µ–π—Å—Ç–≤—É–π. #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–¥–µ–π—Å—Ç–≤–∏—è #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ .mp4",
        "video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ. –£—Å–ø–µ—Ö. #–¥–µ–π—Å—Ç–≤–∏—è #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ #—É—Å–ø–µ—Ö #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #–º—ã—à–ª–µ.mp4",
        "video/motivation/–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ.–ü–æ–ª—é —Å–µ–±—è! #–¥–µ–π—Å—Ç–≤–∏—è #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ #–ø–æ–≤–µ—Ä—å–≤—Å–µ–±—è #—Å–∞–º–æ—Å–æ–≤–µ—Ä.mp4",
    ]
    video = open(random.choice(videos), 'rb')
    await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É—Å–∫–∞ –≤–∏–¥–µ–æ!")
    await bot.send_video(message.chat.id, video=video)

#–í–æ–ø—Ä–æ—Å 1
@dp.message_handler(commands=['quiz'])
async def quiz_1(message: types.Message):
    markup = InlineKeyboardMarkup()
    button_call_1 = InlineKeyboardButton("Next LVL", callback_data='button_call_1')
    markup.add(button_call_1)

    question = "1.–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ—Å–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã?"
    answers = [
        "2 –≥–æ–¥–∞",
        "–î–µ—Å—è—Ç–∫–∏ –ª–µ—Ç",
        "3000 –ª–µ—Ç",
        "777 –ª–µ—Ç",
        "–ú–ù–û–ì–û –õ–ï–¢"
    ]
    await bot.send_poll(
        chat_id=message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup=markup
    )

#–í–æ–ø—Ä–æ—Å 2
@dp.callback_query_handler(lambda call: call.data == "button_call_1")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_2 = InlineKeyboardButton("Next LVL", callback_data='button_call_2')
    markup.add(button_call_2)

    question = "2.–ü–æ—á–µ–º—É —Å–ø–∏—á–∫–∏ –Ω–∞–∑—ã–≤–∞—é—Ç —à–≤–µ–¥—Å–∫–∏–º–∏?"
    answers = [
        "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –°–æ—Ñ–∏—Å—Ç–∏–∫–∞",
        "–ò—Ö –∏–∑–æ–±—Ä–µ–ª —à–≤–µ–¥",
        "–ó–∞–∑–≤–µ–Ω–µ—Ç—å –°–≤–æ—è—á–µ–Ω–∏—Ü–∞",
        "–ë–∞–±—É—à–∏ –ö–æ—Ä–∞–±–ª–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å",
        "–û—Ç–≥–æ—Ä–µ—Ç—å –ü—Ä–∏–∑–µ—Ä"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 3
@dp.callback_query_handler(lambda call: call.data == "button_call_2")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_3 = InlineKeyboardButton("Next LVL", callback_data='button_call_3')
    markup.add(button_call_3)

    question = "3.–ö–∞–∫–æ–≤–∞ –ø—Ä–∏—Ä–æ–¥–∞ –∏–∫–æ—Ç—ã?"
    answers = [
        "–ù–∞–∏—Å–∫–æ—Å—å –†–µ–Ω—Ç–≥–µ–Ω–æ–≤",
        "–∏–∫–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∑–∞ —Å—á–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –º—ã—à—Ü",
        "–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ",
        "–ë–∏–Ω—Ç–æ–≤–∞—Ç—å –õ–µ–Ω–∏—Ç—å—Å—è",
        "–û–¥–æ–ª–∂–∏—Ç—å –û—Ç—Ç–µ–Ω–æ–∫"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 4
@dp.callback_query_handler(lambda call: call.data == "button_call_3")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_4 = InlineKeyboardButton("Next LVL", callback_data='button_call_4')
    markup.add(button_call_4)

    question = "4.–ö–∞–∫ –ú–ö–° —É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –º–µ—Ç–µ–æ—Ä–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤?"
    answers = [
        "–ì–æ—Ä—à–µ—á–Ω–∏–∫ –¢—Ä–µ–≤–æ–≥–∞",
        "–ù–∏–∫–∞–∫",
        "–ö–∏–ª–æ–≤–∞—Ç—Ç –ü—Ä–æ—Å—Ç–æ–Ω–∞—Ä–æ–¥—å–µ",
        "–õ–∞–ø–æ—á–∫–∞ –ú–µ—Ä–∫–∞–Ω—Ç–∏–ª–∏–∑–º",
        "–ö—É–±–æ–≤—ã–π –ú–æ—Ç—ã–ª—å"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 5
@dp.callback_query_handler(lambda call: call.data == "button_call_4")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_5 = InlineKeyboardButton("Next LVL", callback_data='button_call_5')
    markup.add(button_call_5)

    question = "5.–°–∫–æ–ª—å–∫–æ –∑–æ–ª–æ—Ç–∞ –≤ –∑–æ–ª–æ—Ç–æ–π –æ–ª–∏–º–ø–∏–π—Å–∫–æ–π –º–µ–¥–∞–ª–∏?"
    answers = [
        "–î–∞–ª—å–Ω–µ–π—à–∏–π –≠–ª–µ–∫—Ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞",
        "–ü–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É-6 –≥—Ä–∞–º–º–æ–≤.",
        "–ì—Ä–∞–Ω–∞—Ç–æ–º–µ—Ç—á–∏–∫ –®—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞",
        "–ë–æ—Ä–µ–Ω–∏–µ –û–±–≤–µ—Å–∏—Ç—å—Å—è",
        "–ì–æ–º–µ—Ä–∏—á–µ—Å–∫–∏–π –õ–æ—â–∏–Ω–∞"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 6
@dp.callback_query_handler(lambda call: call.data == "button_call_5")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_6 = InlineKeyboardButton("Next LVL", callback_data='button_call_6')
    markup.add(button_call_6)

    question = "6.–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–¥—É–±–∏–Ω–∞ —Å—Ç–æ–µ—Ä–æ—Å–æ–≤–∞—è¬ª?"
    answers = [
        "–ú–∞–ª–∞–π—Ü—ã –ü—Ä–∏—Å–∞—Å—ã–≤–∞–Ω–∏–µ",
        "–¢–æ –∂–µ, —á—Ç–æ –Ω–µ–æ—Ç–µ—Å–∞–Ω–Ω–∞—è",
        "–ú–æ–ª–æ–¥–æ–≥–≤–∞—Ä–¥–µ–µ—Ü –ü–æ–¥–∂–∞—Ä–∏—Å—Ç—ã–π",
        "–°–∫–æ–ø–∏–¥–æ–º–Ω–∏—á–∞—Ç—å –§—Ç–∏–∑–∏–∞—Ç—Ä–∏—è",
        "–ê–ø–ø–∞—Ä–∞—Ç—á–∏–∫ –ú–∞—Å—Ç–æ–¥–æ–Ω—Ç"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 7
@dp.callback_query_handler(lambda call: call.data == "button_call_6")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_7 = InlineKeyboardButton("Next LVL", callback_data='button_call_7')
    markup.add(button_call_7)

    question = "7.–ö–æ–≥–¥–∞ –ø–æ–≥–∞—Å–Ω–µ—Ç –°–æ–ª–Ω—Ü–µ?"
    answers = [
        "–ú–∏—Ä—è–Ω–∏–Ω –ü–æ–¥—Å–∏–Ω–∏–≤–∞—Ç—å",
        "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ 5 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –ª–µ—Ç",
        "–ê—Ç–µ–∏–∑–º –°–ª–æ–∂–∏—Ç—å—Å—è",
        "–ü–ª–æ—â–∞–¥—å –£—Å–∏–¥–µ—Ç—å",
        "–ù–µ—Å—É—Ä–∞–∑–Ω—ã–π –û—Å–≤–æ–∏—Ç—å"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 8
@dp.callback_query_handler(lambda call: call.data == "button_call_7")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_8 = InlineKeyboardButton("Next LVL", callback_data='button_call_8')
    markup.add(button_call_8)

    question = "8.–ú–æ–∂–Ω–æ –ª–∏ –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ –∏–ª–∏ —è–ø–æ–Ω—Å–∫–∏–º–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞–º–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä—É—Å—Å–∫–æ–µ –∏–º—è?"
    answers = [
        "–ù–µ –∑–Ω–∞—é",
        "–ú–æ–∂–Ω–æ, –Ω–æ —á–∞—â–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ",
        "–ù–∞–≤–µ—Ä–Ω–æ–µ",
        "–ù–ê–†–£–¢–û–û–û–û",
        "–†–ò–ú–£–†–£"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 9
@dp.callback_query_handler(lambda call: call.data == "button_call_8")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_9 = InlineKeyboardButton("Next LVL", callback_data='button_call_9')
    markup.add(button_call_9)

    question = "9.–ë—ã–≤–∞–µ—Ç –ª–∏ —É —á–µ–ª–æ–≤–µ–∫–∞ –¥–≤–∞ —Å–µ—Ä–¥—Ü–∞?"
    answers = [
        "–ó–∞–≤–∑—è—Ç—ã–π –†–∞–∑–∂–∞—Ç—å—Å—è",
        "–î–∞, —Ö–æ—Ç—è –∏ –∫—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–æ",
        "–ü—Ä–æ–±–µ–≥ –°–∏–æ–Ω–∏–∑–º",
        "–ù–∞–∏–≤–Ω—ã–π –ü–æ—Ä—Ç–≤–µ–π–Ω",
        "–ü–µ—Ä–µ–∫—Ä–∞–∏–≤–∞—Ç—å –°–∞–Ω–∏—Ä–æ–≤–∞—Ç—å"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 10
@dp.callback_query_handler(lambda call: call.data == "button_call_9")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_10 = InlineKeyboardButton("Next LVL", callback_data='button_call_10')
    markup.add(button_call_10)

    question = "10.–ü–æ—á–µ–º—É –¥–ª—è –º–ª–∞–¥–µ–Ω—Ü–µ–≤ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –≤—ã–±–∏—Ä–∞—é—Ç –æ–¥–µ–∂–¥—É –≥–æ–ª—É–±–æ–≥–æ —Ü–≤–µ—Ç–∞, –∞ –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö –¥–µ–≤–æ—á–µ–∫ ‚Äî —Ä–æ–∑–æ–≤–æ–≥–æ?"
    answers = [
        "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –†–∞—Å–ø—É—Ç—å–µ –¢–æ–Ω–∫–æ–ø—Ä—è—Ö–∞",
        "–≥–æ–ª—É–±–∞—è –æ–¥–µ–∂–¥–∞ –±—ã–ª–∞ –¥–µ—à–µ–≤–æ–π —Ñ–æ—Ä–º–æ–π —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏",
        "–ö–æ–Ω—Ü–µ—Ä—Ç–º–µ–π—Å—Ç–µ—Ä –õ—ã–∫–æ –ü–æ–∂–µ–ª–∞—Ç—å",
        "–í—ã–∫–æ–≤—ã—Ä—è—Ç—å –†–æ—Å—Ç–±–∏—Ñ –¢–µ–Ω–Ω–∏—Å",
        "–ê—Ä–æ–º–∞—Ç –ù–∞–≥–∏—à–æ–º –ù–∞–∫—Ä—É—Ç–∏—Ç—å"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 11
@dp.callback_query_handler(lambda call: call.data == "button_call_10")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_11 = InlineKeyboardButton("Next LVL", callback_data='button_call_11')
    markup.add(button_call_11)

    question = "11.–ü–æ—á–µ–º—É –ª–æ—Å–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç —Ä–æ–≥–∞?"
    answers = [
        "–ö–∞—Ä—Ç–æ—á–∫–∞ –¢—Ä—É—â–æ–±–∞ –§–∞–∫—Ç–æ–≥—Ä–∞—Ñ–∏—è",
        "–ó–∞ –Ω–µ–Ω–∞–¥–æ–±–Ω–æ—Å—Ç—å—é",
        "–ê—Å—Ç—Ä–∞ –ö–æ—Ä–Ω–µ–ø–ª–æ–¥ –†–æ–∂–¥–∞–µ–º–æ—Å—Ç—å",
        "–ê–ø–∞—à –í—Å–∫–æ–ª—ã—Ö–Ω—É—Ç—å—Å—è –ü–æ–¥—Å—Ç–µ–∂–∫–∞",
        "–ö–æ—Ä—Ä—É–ø—Ü–∏—è –†–∞—Å—Å–µ—Ä–¥–∏—Ç—å—Å—è –°–æ—Å—Ç—è–∑–∞–Ω–∏–µ"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 12
@dp.callback_query_handler(lambda call: call.data == "button_call_11")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_12 = InlineKeyboardButton("Next LVL", callback_data='button_call_12')
    markup.add(button_call_12)

    question = "12.–ö–∞–∫ –≤–æ–∑–Ω–∏–∫–ª–∏ –ì–∏–º–∞–ª–∞–∏?"
    answers = [
        "–î–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å –î–æ–∂–¥–∞—Ç—å—Å—è –ö–∏–ø—è—á–µ–Ω—ã–π",
        "200 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç –Ω–∞–∑–∞–¥ ‚Äî –ü–∞–Ω–≥–µ—é",
        "–û–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω—ã–π –û—Ç–∫–∏–Ω—É—Ç—å",
        "–õ–∞–∑—É—Ä–Ω—ã–π –≠–∫—Å–ø–∞–Ω—Å–∏–≤–Ω—ã–π",
        "–ö—É—Ä–Ω–æ—Å—ã–π –ü–ª–æ—à–∫–∞"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 13
@dp.callback_query_handler(lambda call: call.data == "button_call_12")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_13 = InlineKeyboardButton("Next LVL", callback_data='button_call_13')
    markup.add(button_call_13)

    question = "13.–ö—Ç–æ —Å–æ–∑–¥–∞–ª –±–æ—Ä—å–±—É —Å–∞–º–±–æ?"
    answers = [
        "–í—ã–≥–Ω—É—Ç—å—Å—è –ß–∞–ª–∫–∞",
        "–í 1920-–µ –≥–æ–¥—É –í–∏–∫—Ç–æ—Ä –°–ø–∏—Ä–∏–¥–æ–Ω–æ–≤",
        "–ê–ª–µ–±–∞—Å—Ç—Ä –ö–æ–ª–ª–µ–∂",
        "–ö–ª–µ–ø—Ç–æ–º–∞–Ω –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
        "–ñ–µ–≤–∞—Ç—å –°—Ç–∞—Ö–∞–Ω–æ–≤–µ—Ü"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 14
@dp.callback_query_handler(lambda call: call.data == "button_call_13")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_14 = InlineKeyboardButton("Next LVL", callback_data='button_call_14')
    markup.add(button_call_14)

    question = "14.–ó–∞—á–µ–º –Ω–∞ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –≤—ã—à–∫–∞—Ö –≥–æ—Ä–∏—Ç –æ–≥–æ–Ω—å?"
    answers = [
        "–î–æ–º–∏–Ω–∏–æ–Ω –ó–∞–º–∏—Ä–∏—Ç—å—Å—è",
        "–≠—Ç–æ —Å–≥–æ—Ä–∞–µ—Ç –ø–æ–ø—É—Ç–Ω—ã–π –Ω–µ—Ñ—Ç—è–Ω–æ–π –≥–∞–∑",
        "–í–æ—Ä–≤–∞—Ç—å—Å—è –§–∞—Ä–∏—Å–µ–π",
        "–ù–∞–≥–ª–∞–∑–Ω–∏–∫ –û—Ç–∫–æ–ª—É–ø–∞—Ç—å",
        "–û–¥–µ—Ä–∂–∏–º—ã–π –ü—Ä–æ–ø–µ—Ä—á–∏—Ç—å"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 15
@dp.callback_query_handler(lambda call: call.data == "button_call_14")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_15 = InlineKeyboardButton("Next LVL", callback_data='button_call_15')
    markup.add(button_call_15)

    question = "15.–î–∞–ª–µ–∫–æ –ª–∏ —É–ª–µ—Ç–∞—é—Ç –Ω–∞–¥—É—Ç—ã–µ –≥–µ–ª–∏–µ–º —à–∞—Ä–∏–∫–∏?"
    answers = [
        "–í—ã–º—ã—à–ª–µ–Ω–Ω—ã–π –§–∏–≥–ª—è—Ä–∏—Ç—å",
        "–ù–∞ —Ç—ã—Å—è—á–∏ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤",
        "–î–æ—Å–∞–¥–æ–≤–∞—Ç—å –ü–ª–∞–Ω–µ—Ä–∫–∞",
        "–ù–∞–∑–∞–¥–∏ –û–ø–µ—Ä–µ—Ç—å",
        "–í–æ–ª—å–Ω–æ–Ω–∞–µ–º–Ω—ã–π –ü–µ—Ä–µ–∫—Ä–∞—Å–∏—Ç—å—Å—è"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 16
@dp.callback_query_handler(lambda call: call.data == "button_call_15")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_16 = InlineKeyboardButton("Next LVL", callback_data='button_call_16')
    markup.add(button_call_16)

    question = "16.–ö–∞–∫ –≥–æ—Ä–Ω—ã–µ –∫–æ–∑–ª—ã –¥–µ—Ä–∂–∞—Ç—Å—è –Ω–∞ –æ—Ç–≤–µ—Å–Ω—ã—Ö —Å–∫–∞–ª–∞—Ö?"
    answers = [
        "–ì–ª–∞–¥—å –ñ—É–ª–∏–∫",
        "–ó–∞ —Å—á–µ—Ç —Å–∫–∞–ª—å–Ω—ã—Ö –Ω–µ—Ä–æ–≤–Ω–æ—Å—Ç–µ–π",
        "–ë–µ–ª–µ—Ç—å –û—Ç—ä–µ–∑–¥",
        "–í–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ù—ã–Ω–µ—à–Ω–∏–π",
        "–ü—Ä–∏–∫–æ—Ä–Ω—É—Ç—å –£–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å–Ω—ã–π"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 17
@dp.callback_query_handler(lambda call: call.data == "button_call_16")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_17 = InlineKeyboardButton("Next LVL", callback_data='button_call_17')
    markup.add(button_call_17)

    question = "17.–ü—Ä–∞–≤–¥–∞ –ª–∏,—á—Ç–æ –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ –≤–∏–¥—è—Ç –º–∏—Ä –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–º?"
    answers = [
        "–ñ—É–ª—å–Ω–∏—á–∞—Ç—å –ü—é—Ä–µ",
        "–û–Ω–∏ –µ–≥–æ –≤–æ–æ–±—â–µ –ø–æ—á—Ç–∏ –Ω–µ –≤–∏–¥—è—Ç",
        "–ë–∞—Ç—Ä–∞—á–µ—Å—Ç–≤–æ –ö–∞–ø—Å—É–ª–∞",
        "–ù–µ–ø—Ä–∏–º–∏—Ä–∏–º—ã–π –ü—Ä–∏–∫–∞–∑—á–∏–∫",
        "–†–∞–∑—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞—Ç—å –£–ø—Ä–æ—á–Ω–∏—Ç—å"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 18
@dp.callback_query_handler(lambda call: call.data == "button_call_17")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_18 = InlineKeyboardButton("Next LVL", callback_data='button_call_18')
    markup.add(button_call_18)

    question = "18.–ü–æ—á–µ–º—É –≤–æ–¥–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –∫–∏—Å–ª–æ—Ä–æ–¥–∞ –∏ –≤–æ–¥–æ—Ä–æ–¥–∞, –Ω–µ –≥–æ—Ä–∏—Ç –∏ –Ω–µ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è?"
    answers = [
        "–ò—Å–ø—Ä–∞–∂–Ω—è—Ç—å—Å—è –ü—Ä–æ—Ä–≤–∞—Ç—å",
        "–ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –∏ –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≥–æ—Ä–µ–Ω–∏—è",
        "–ë–∏–æ–ª–æ–≥ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤–∫–∞",
        "–ö–æ–ø–∞—Ç—å—Å—è –ü—Ä–æ—Ç–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç",
        "–ü—É—Ç–∞–Ω—ã–π –£–º–æ—â–Ω–∏—Ç—å"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 19
@dp.callback_query_handler(lambda call: call.data == "button_call_18")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_19 = InlineKeyboardButton("Next LVL", callback_data='button_call_19')
    markup.add(button_call_19)

    question = "19.–ü–æ—á–µ–º—É –î–º–∏—Ç—Ä–∏–π –ú–µ–Ω–¥–µ–ª–µ–µ–≤ –Ω–µ –ø–æ–ª—É—á–∏–ª –ù–æ–±–µ–ª–µ–≤—Å–∫—É—é –ø—Ä–µ–º–∏—é?"
    answers = [
        "–û—Ç—Ä–µ—à–∏—Ç—å—Å—è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        "–ú–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å,–Ω–µ —É—Å–ø–µ–ª",
        "–°–∏—Ä–æ—Ç–µ—Ç—å –®–µ–ª–∫–æ–≤–∏–Ω–∫–∞",
        "–ì–µ—Ç–º–∞–Ω –ü–∞—Ä–∞–∑–∏—Ç",
        "–ê—Ñ–µ—Ä–∏—Å—Ç –°–µ–º–µ–Ω–∏—Ç—å—Å—è"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 20
@dp.callback_query_handler(lambda call: call.data == "button_call_19")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_20 = InlineKeyboardButton("Next LVL", callback_data='button_call_20')
    markup.add(button_call_20)

    question = "20.–ö–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª—Å—è –º–∞—Ä—à ¬´–ü—Ä–æ—â–∞–Ω–∏–µ —Å–ª–∞–≤—è–Ω–∫–∏¬ª?"
    answers = [
        "–î–∞–Ω–Ω—ã–π –°–≤–µ—Ç–æ—Ç–µ—Ö–Ω–∏–∫",
        "–í 1912 –≥–æ–¥—É",
        "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–Ω—ã–π –ì–æ—Ä–º—è",
        "–í 1920 –≥–æ–¥—É",
        "–î—É—Ä—à–ª–∞–≥ –°–æ—Ö–Ω—É—Ç—å"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 21
@dp.callback_query_handler(lambda call: call.data == "button_call_20")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_21 = InlineKeyboardButton("Next LVL", callback_data='button_call_21')
    markup.add(button_call_21)

    question = "21.–ï—Å–ª–∏ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∞—Ç–æ–º–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—É—Å—Ç–æ—Ç–∞, –ø–æ—á–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–∫–≤–æ–∑—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞?"
    answers = [
        "–ù–∞–º–∞–ª—ã–≤–∞—Ç—å –ü–æ–¥—Å–∏–¥–µ—Ç—å",
        "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞",
        "–û—Ç–≤—è–∑–∞—Ç—å—Å—è –°—á–µ—Ç–≤–µ—Ä–∏—Ç—å",
        "–ê—Ä–∫–∞ –ì–¥–µ",
        "–ö–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –¢–æ—Ä–∏"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 22
@dp.callback_query_handler(lambda call: call.data == "button_call_21")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_22 = InlineKeyboardButton("Next LVL", callback_data='button_call_22')
    markup.add(button_call_22)

    question = "22.–ö–∞–∫–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º—ã–º –º–∞—Å—à—Ç–∞–±–Ω—ã–º?"
    answers = [
        "–ì–æ—Ä–µ—á—å –ù—É–∂–¥–∞—Ç—å—Å—è",
        "–ì–∏–≥–∞–Ω—Ç—Å–∫–æ–º—É –í–æ–¥–æ–ø—Ä–æ–≤–æ–¥—É –æ—Ç –õ–∏–≤–∏–∏ –¥–æ –ö–∏—Ç–∞—è",
        "–û–±–ª–∞—á–Ω—ã–π –°—É—à–∏—Ç—å—Å—è",
        "–í–µ—á–µ—Ä–µ—Ç—å –ü–∏—Ç–µ–∫–∞–Ω—Ç—Ä–æ–ø",
        "–ó–∞–º—ã—à–ª—è—Ç—å—Å—è –¢–æ—Ä–≥–ø—Ä–µ–¥"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 23
@dp.callback_query_handler(lambda call: call.data == "button_call_22")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_23 = InlineKeyboardButton("Next LVL", callback_data='button_call_23')
    markup.add(button_call_23)

    question = "23.–ü–æ—á–µ–º—É –í—Å–µ–ª–µ–Ω–Ω–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤–æ–º –ø–æ—á—Ç–∏ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ?"
    answers = [
        "–ó–∞–ø–µ—Ç—å –û—Ç—á–∞—Å—Ç–∏",
        "–ü–æ—Ç–æ–º—É —á—Ç–æ –≤–µ—â–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä—è–ª–æ—Å—å –≤–º–µ—Å—Ç–µ —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º",
        "–í–∑–±–æ—Ä–æ–Ω–∏—Ç—å –£–ø—Ä–µ—Ç—å",
        "–ù–∞—Å–ª—ã—à–∞—Ç—å—Å—è –ü—Ä–æ—Å—Ü–µ–Ω–∏—É–º",
        "–û—Ç–∫–∞—á–Ω—É—Ç—å –û—Ü–µ–ø–ª–µ–Ω–∏–µ"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 24
@dp.callback_query_handler(lambda call: call.data == "button_call_23")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_24 = InlineKeyboardButton("Next LVL", callback_data='button_call_24')
    markup.add(button_call_24)

    question = "24.–ë—ã–≤–∞–µ—Ç –ª–∏ –∂–∏–≤–æ—Ç–Ω—ã–º —Å–∫—É—á–Ω–æ?"
    answers = [
        "–ê—Ç—Ä–∏–±—É—Ç –ü–æ–ø—É–¥—Ä–∏—Ç—å",
        "–î–∞ –∫–∞–∫ –∏ –ª—é–¥—è–º",
        "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –†–∞–∑–±—Ä—é–∑–∂–∞—Ç—å—Å—è",
        "–î–∞–º–±–∞ –ù–∞–≤–µ—Ä–Ω—É—Ç—å—Å—è",
        "–ï—Ä–Ω–∏–∫ –ö–æ–º–µ—Ç–∞"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 25
@dp.callback_query_handler(lambda call: call.data == "button_call_24")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_25 = InlineKeyboardButton("Next LVL", callback_data='button_call_25')
    markup.add(button_call_25)

    question = "25.–ú–æ–∂–µ—Ç –ª–∏ ¬´–Ω–∞—Å—ã—Ç–∏—Ç—å—Å—è¬ª —á—ë—Ä–Ω–∞—è –¥—ã—Ä–∞?"
    answers = [
        "–ú–∏–Ω—É—Ç–∞ –®—Ç—ã–∫–æ–≤–∞—Ç—å",
        "–ù–µ –º–æ–∂–µ—Ç",
        "–ü–∏—Ä–æ–∂–Ω–∏–∫ –¢—Ä–∞–≤–µ—Ä–∑",
        "–ö–∞–ª –ù–µ–º–Ω–æ–≥–æ",
        "–ó–∞–±–æ—Ç–∏—Ç—å—Å—è –ò–≥–ª–æ—Ç–µ—Ä–∞–ø–∏—è"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 26
@dp.callback_query_handler(lambda call: call.data == "button_call_25")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_26 = InlineKeyboardButton("Next LVL", callback_data='button_call_26')
    markup.add(button_call_26)

    question = "26.–ü–æ—á–µ–º—É –≤ –ë–∞—Ä—Å–µ–ª–æ–Ω–µ –≤—Å–µ —Ç–∞–∫—Å–∏ —á–µ—Ä–Ω–æ-–∂–µ–ª—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞?"
    answers = [
        "–ù–∞–ø–∞–¥–∫–∏ –ù–µ—Å–æ–º–Ω–µ–Ω–Ω—ã–π",
        "—á–µ—Ä–Ω—ã–π ‚Äî —Ü–≤–µ—Ç —Ç—Ä–∞—É—Ä–∞, –∏ –∂–µ–ª—Ç—ã–π ‚Äî —Ü–≤–µ—Ç –ø–æ–∑–æ—Ä–∞",
        "–í–Ω–µ—à–Ω–∏–π –ö–≤–æ—Ä—É–º",
        "–ö–∞–±–∞—Ä–≥–∞ –ü–ª–∞—Ñ–æ–Ω",
        "–ó–∞—Å–Ω—è—Ç—ã–π –°–æ–±–æ—Ä–Ω–æ—Å—Ç—å"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
        reply_markup = markup
    )

#–í–æ–ø—Ä–æ—Å 27
@dp.callback_query_handler(lambda call: call.data == "button_call_26")
async def quiz_2(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    button_call_27 = InlineKeyboardButton("Next LVL", callback_data='button_call_27')
    markup.add(button_call_27)

    question = "27.–ü–æ—á–µ–º—É –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã –Ω–∞–∑—ã–≤–∞—é—Ç –ì–æ–ª–ª–∞–Ω–¥–∏–µ–π?"
    answers = [
        "–ó–∞—Å–∏–¥–µ—Ç—å –ú–æ—á–∞",
        "–∏–º—è –Ω–æ—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–∑ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π, –∞ –Ω–µ –≤—Å—è —Å—Ç—Ä–∞–Ω–∞",
        "–°–ø–æ–∫–æ–π–Ω—ã–π –£–ø–æ–º—è–Ω—É—Ç—å",
        "–ü–µ–Ω–æ–ø–ª–∞—Å—Ç –ü–æ–¥–ø–∏—Ä–∞—Ç—å—Å—è",
        "–ü–æ–ª—é–±–æ–≤–∞—Ç—å—Å—è –°–æ–≤–º–µ—Å—Ç–Ω—ã–π"
    ]
    await bot.send_poll(
        chat_id=call.message.chat.id,
        question=question,
        options=answers,
        is_anonymous=False,
        type='quiz',
        correct_option_id=1,
        open_period=60,
        explanation="–û–π –±–æ–π —Ç—ã —á–µ?",
    )



@dp.message_handler()
async def echo(message: types.Message):
    if message.text.isdigit():
        # await bot.send_message(message.chat.id, int(message.text) * int(message.text))
        await message.reply(int(message.text) * int(message.text))
    else:
        await message.reply(message.text)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)